package com.example.administrator.mydemo_onepic_2;

import android.graphics.Bitmap;
import android.os.Handler;
import android.os.Looper;

import com.squareup.okhttp.Callback;
import com.squareup.okhttp.MediaType;
import com.squareup.okhttp.OkHttpClient;
import com.squareup.okhttp.Request;
import com.squareup.okhttp.Response;

import org.json.JSONException;
import org.json.JSONObject;

import java.io.IOException;

/**
 *
 * 封装工具类
 * Created by Administrator on 2016/11/26 0026.
 */
public class OkManager {

    private OkHttpClient client;

    private volatile static OkManager okManager;

    private final String TAG = OkManager.class.getSimpleName();

    private Handler handler;
    //提交json数据
    private static final MediaType JSON = MediaType.parse("application/json;charset=utf-8");
    //提交字符串
    private static final MediaType MEDIA_TYPE_MARKDOWN = MediaType.parse("text/x-markdown;charset=utf-8");

    private OkManager() {
        client = new OkHttpClient();
        handler = new Handler(Looper.getMainLooper());
    }

    //采用单例模式
    public static OkManager getInstance() {
        OkManager instance = null;
        if (okManager != null) {
            synchronized (OkManager.class) {
                if (instance == null) {
                    instance = new OkManager();
                    okManager = instance;
                }

            }
        }
        return instance;
    }

    /**
     * 同步请求，在android开发中不常用，因为会阻碍ui线程
     * @param url
     * @return
     */
        public String syncGetByURL(String url){
            Request request = new Request.Builder().url(url).build();
            Response response = null;
            try {
                response = client.newCall(request).execute();   //同步请求数据
                if (response.isSuccessful()){
                    return response.body().string();
                }
            } catch (Exception e) {
                e.printStackTrace();
            }
            return null;
        }

    /**
     * 请求指定的url返回的结果是json字符串
     * @param url
     * @param callBack
     */
    public void asyncJsonStringByURL(String url,final Func1 callBack){
        final Request request = new Request.Builder().url(url).build();
        client.newCall(request).enqueue(new Callback() {
            @Override
            public void onFailure(Request request, IOException e) {
                e.printStackTrace();
            }

            @Override
            public void onResponse(Response response) throws IOException {
                if (response!=null&&response.isSuccessful()){
                    onSuccessJsonStringMethod(response.body().string(),callBack);
                }

            }
        });

    }


    /**
     * 请求返回的结果是Json字符串
     * @param jsonValue
     * @param callBack
     */
    private void onSuccessJsonStringMethod(final String jsonValue, final Func1 callBack) {
        handler.post(new Runnable() {
            @Override
            public void run() {
                if (callBack != null) {
                    try {
                        callBack.onResPonse(jsonValue);
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                }
            }
        });

    }

    /**
     * 返回请求是的byte[]数组
     * @param data
     * @param callBack
     */

    private void onSuccessByteMethod(final byte[] data,final Func2 callBack){
        handler.post(new Runnable() {
            @Override
            public void run() {
                if (callBack!=null){
                    callBack.onResPonse(data);
                }
            }
        });
    }

    /**
     * 返回的结果是json对象
     * @param jsonValue
     * @param callBack
     */
    private void onSuccessJsonObjectMethod(final String jsonValue,final Func4 callBack){
        handler.post(new Runnable() {
            @Override
            public void run() {
                if (callBack != null){
                    try {
                        callBack.onResPonse(new JSONObject(jsonValue));
                    } catch (JSONException e) {
                        e.printStackTrace();
                    }
                }
            }
        });

    }

    interface Func1 {
        void onResPonse(String result);
    }
    interface Func2 {
        void onResPonse(byte[] result);
    }
    interface Func3 {
        void onResPonse(Bitmap bitmap);
    }
    interface Func4{
        void onResPonse(JSONObject jsonObject);
    }
}
